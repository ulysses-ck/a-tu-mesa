Project "None" {
  database_type: 'SQLite'
  Note: '''None
  Last Updated At 10-29-2024 11:22PM UTC'''
}

enum admin.positive_small_integer_logentry_action_flag {
  "1" [note: '''Addition''']
  "2" [note: '''Change''']
  "3" [note: '''Deletion''']
}

Table admin.LogEntry {
  Note: '''
LogEntry(id, action_time, user, content_type, object_id, object_repr, action_flag, change_message)

*DB table: django_admin_log*'''

  id auto [pk, unique, not null]
  action_time date_time [default:`django.utils.timezone.now()`, not null]
  user_id foreign_key [not null]
  content_type_id foreign_key [null]
  object_id text [null]
  object_repr char [not null]
  action_flag admin.positive_small_integer_logentry_action_flag [not null]
  change_message text [not null]

  indexes {
    (content_type_id) [name: 'django_admin_log_content_type_id_c4bce8eb', type: btree]
    (id) [pk, unique, name: 'django_admin_log_pkey', type: btree]
    (user_id) [name: 'django_admin_log_user_id_c564eba6', type: btree]
  }
}
ref: admin.LogEntry.user_id > auth.User.id
ref: admin.LogEntry.content_type_id > contenttypes.ContentType.id


Table auth.Group {
  Note: '''
Groups are a generic way of categorizing users to apply permissions, or
some other label, to those users. A user can belong to any number of
groups.

A user in a group automatically has all the permissions granted to that
group. For example, if the group 'Site editors' has the permission
can_edit_home_page, any user in that group will have that permission.

Beyond permissions, groups are a convenient way to categorize users to
apply some label, or extended functionality, to them. For example, you
could create a group 'Special users', and you could write code that would
do special things to those users -- such as giving them access to a
members-only portion of your site, or sending them members-only email
messages.


*DB table: auth_group*'''

  id auto [pk, unique, not null]
  name char [unique, not null]

  indexes {
    (name) [unique, name: 'auth_group_name_key', type: btree]
    (id) [pk, unique, name: 'auth_group_pkey', type: btree]
  }
}


Table auth.Permission {
  Note: '''
The permissions system provides a way to assign permissions to specific
users and groups of users.

The permission system is used by the Django admin site, but may also be
useful in your own code. The Django admin site uses permissions as follows:

- The "add" permission limits the user's ability to view the "add" form
and add an object.
- The "change" permission limits a user's ability to view the change
list, view the "change" form and change an object.
- The "delete" permission limits the ability to delete an object.
- The "view" permission limits the ability to view an object.

Permissions are set globally per type of object, not per specific object
instance. It is possible to say "Mary may change news stories," but it's
not currently possible to say "Mary may change news stories, but only the
ones she created herself" or "Mary may only change news stories that have a
certain status or publication date."

The permissions listed above are automatically created for each model.


*DB table: auth_permission*'''

  id auto [pk, unique, not null]
  name char [not null]
  content_type_id foreign_key [not null]
  codename char [not null]

  indexes {
    (content_type_id) [name: 'auth_permission_content_type_id_2f476e4b', type: btree]
    (content_type_id,codename) [unique, name: 'auth_permission_content_type_id_codename_01ab375a_uniq', type: btree]
    (id) [pk, unique, name: 'auth_permission_pkey', type: btree]
  }
}
ref: auth.Permission.content_type_id > contenttypes.ContentType.id


Table auth.User {
  Note: '''
Users within the Django authentication system are represented by this
model.

Username and password are required. Other fields are optional.


*DB table: auth_user*'''

  id auto [pk, unique, not null]
  password char [not null]
  last_login date_time [null]
  is_superuser boolean [note: '''Designates that this user has all permissions without explicitly assigning them.''', default:`False`, not null]
  username char [note: '''Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.''', unique, not null]
  first_name char [not null]
  last_name char [not null]
  email email [not null]
  is_staff boolean [note: '''Designates whether the user can log into this admin site.''', default:`False`, not null]
  is_active boolean [note: '''Designates whether this user should be treated as active. Unselect this instead of deleting accounts.''', default:`True`, not null]
  date_joined date_time [default:`django.utils.timezone.now()`, not null]

  indexes {
    (id) [pk, unique, name: 'auth_user_pkey', type: btree]
    (username) [unique, name: 'auth_user_username_key', type: btree]
  }
}


Table auth.group_permissions {
  Note: '''
This is a Many-To-Many linking table autogenerated by Django.

*DB table: auth_group_permissions*'''

  id auto [pk, not null]
  permission_id auto
  group_id auto

  indexes {
    (group_id) [name: 'auth_group_permissions_group_id_b120cbf9', type: btree]
    (group_id,permission_id) [unique, name: 'auth_group_permissions_group_id_permission_id_0cd325b0_uniq', type: btree]
    (permission_id) [name: 'auth_group_permissions_permission_id_84c5c92e', type: btree]
    (id) [pk, unique, name: 'auth_group_permissions_pkey', type: btree]
  }
}
ref: auth.Group.id > auth.group_permissions.group_id
ref: auth.Permission.id > auth.group_permissions.permission_id


Table auth.user_groups {
  Note: '''
This is a Many-To-Many linking table autogenerated by Django.

*DB table: auth_user_groups*'''

  id auto [pk, not null]
  group_id auto
  user_id auto

  indexes {
    (group_id) [name: 'auth_user_groups_group_id_97559544', type: btree]
    (id) [pk, unique, name: 'auth_user_groups_pkey', type: btree]
    (user_id) [name: 'auth_user_groups_user_id_6a12ed8b', type: btree]
    (user_id,group_id) [unique, name: 'auth_user_groups_user_id_group_id_94350c0c_uniq', type: btree]
  }
}
ref: auth.User.id > auth.user_groups.user_id
ref: auth.Group.id > auth.user_groups.group_id


Table auth.user_user_permissions {
  Note: '''
This is a Many-To-Many linking table autogenerated by Django.

*DB table: auth_user_user_permissions*'''

  id auto [pk, not null]
  permission_id auto
  user_id auto

  indexes {
    (permission_id) [name: 'auth_user_user_permissions_permission_id_1fbb5f2c', type: btree]
    (id) [pk, unique, name: 'auth_user_user_permissions_pkey', type: btree]
    (user_id) [name: 'auth_user_user_permissions_user_id_a95ead1b', type: btree]
    (user_id,permission_id) [unique, name: 'auth_user_user_permissions_user_id_permission_id_14a6b632_uniq', type: btree]
  }
}
ref: auth.User.id > auth.user_user_permissions.user_id
ref: auth.Permission.id > auth.user_user_permissions.permission_id


Table comanda.Comanda {
  Note: '''
Comanda(id, producto, cantidad, estado, tipo_de_pedido, ticket, mesa, fecha)

*DB table: comanda_comanda*'''

  id big_auto [pk, unique, not null]
  producto_id foreign_key [not null]
  cantidad integer [not null]
  estado_id foreign_key [not null]
  tipo_de_pedido_id foreign_key [not null]
  ticket_id foreign_key [not null]
  mesa_id foreign_key [not null]
  fecha date_time [not null]

  indexes {
    (estado_id) [name: 'comanda_comanda_estado_id_b32ace37', type: btree]
    (mesa_id) [name: 'comanda_comanda_mesa_id_b934bd7a', type: btree]
    (id) [pk, unique, name: 'comanda_comanda_pkey', type: btree]
    (producto_id) [name: 'comanda_comanda_producto_id_8ee6d4ca', type: btree]
    (ticket_id) [name: 'comanda_comanda_ticket_id_930edea9', type: btree]
    (tipo_de_pedido_id) [name: 'comanda_comanda_tipo_de_pedido_id_4dab5bc5', type: btree]
  }
}
ref: comanda.Comanda.producto_id > producto.Producto.id
ref: comanda.Comanda.estado_id > estado.Estado.id
ref: comanda.Comanda.tipo_de_pedido_id > tipoDePedido.TipoDePedido.id
ref: comanda.Comanda.ticket_id > ticket.Ticket.id
ref: comanda.Comanda.mesa_id > mesa.Mesa.id


Table contenttypes.ContentType {
  Note: '''
ContentType(id, app_label, model)

*DB table: django_content_type*'''

  id auto [pk, unique, not null]
  app_label char [not null]
  model char [not null]

  indexes {
    (app_label,model) [unique, name: 'django_content_type_app_label_model_76bd3d3b_uniq', type: btree]
    (id) [pk, unique, name: 'django_content_type_pkey', type: btree]
  }
}


Table estado.Estado {
  Note: '''
Estado(id, nombre)

*DB table: estado_estado*'''

  id big_auto [pk, unique, not null]
  nombre char [not null]

  indexes {
    (id) [pk, unique, name: 'estado_estado_pkey', type: btree]
  }
}


Table factura.Factura {
  Note: '''
Factura(id, pago, ticket)

*DB table: factura_factura*'''

  id big_auto [pk, unique, not null]
  pago_id foreign_key [not null]
  ticket_id foreign_key [not null]

  indexes {
    (pago_id) [name: 'factura_factura_pago_id_1fb7f392', type: btree]
    (id) [pk, unique, name: 'factura_factura_pkey', type: btree]
    (ticket_id) [name: 'factura_factura_ticket_id_d4e9461b', type: btree]
  }
}
ref: factura.Factura.pago_id > pago.Pago.id
ref: factura.Factura.ticket_id > ticket.Ticket.id


Table mesa.Mesa {
  Note: '''
Mesa(id, nro_mesa)

*DB table: mesa_mesa*'''

  id big_auto [pk, unique, not null]
  nro_mesa integer [not null]

  indexes {
    (id) [pk, unique, name: 'mesa_mesa_pkey', type: btree]
  }
}


Table pago.FormaDePago {
  Note: '''
FormaDePago(id, nombre)

*DB table: pago_formadepago*'''

  id big_auto [pk, unique, not null]
  nombre char [not null]

  indexes {
    (id) [pk, unique, name: 'pago_formadepago_pkey', type: btree]
  }
}


Table pago.Pago {
  Note: '''
Pago(id, nro_autorizacion, fecha, pagador, forma_de_pago)

*DB table: pago_pago*'''

  id big_auto [pk, unique, not null]
  nro_autorizacion integer [not null]
  fecha date_time [not null]
  pagador_id foreign_key [not null]
  forma_de_pago_id foreign_key [not null]

  indexes {
    (forma_de_pago_id) [name: 'pago_pago_forma_de_pago_id_c96685fa', type: btree]
    (pagador_id) [name: 'pago_pago_pagador_id_c44680cb', type: btree]
    (id) [pk, unique, name: 'pago_pago_pkey', type: btree]
  }
}
ref: pago.Pago.pagador_id > persona.Persona.id
ref: pago.Pago.forma_de_pago_id > pago.FormaDePago.id


Table persona.Persona {
  Note: '''
Persona(id, nombre, rol, correo, telefono, documento)

*DB table: persona_persona*'''

  id big_auto [pk, unique, not null]
  nombre char [not null]
  rol_id foreign_key [not null]
  correo email [not null]
  telefono char [not null]
  documento char [not null]

  indexes {
    (id) [pk, unique, name: 'persona_persona_pkey', type: btree]
    (rol_id) [name: 'persona_persona_rol_id_2b0721b5', type: btree]
  }
}
ref: persona.Persona.rol_id > rol.Rol.id


Table producto.Producto {
  Note: '''
Producto(id, precio, nombre, tipo)

*DB table: producto_producto*'''

  id big_auto [pk, unique, not null]
  precio float [not null]
  nombre char [not null]
  tipo_id foreign_key [not null]

  indexes {
    (id) [pk, unique, name: 'producto_producto_pkey', type: btree]
    (tipo_id) [name: 'producto_producto_tipo_id_ee160358', type: btree]
  }
}
ref: producto.Producto.tipo_id > tipoProducto.TipoProducto.id


Table producto.TipoProducto {
  Note: '''
TipoProducto(id, nombre)

*DB table: producto_tipoproducto*'''

  id big_auto [pk, unique, not null]
  nombre char [not null]

  indexes {
    (id) [pk, unique, name: 'producto_tipoproducto_pkey', type: btree]
  }
}


Table promociones.Condiciones {
  Note: '''
Condiciones(id, inicio, expira, producto)

*DB table: promociones_condiciones*'''

  id big_auto [pk, unique, not null]
  inicio date_time [not null]
  expira date_time [not null]
  producto_id foreign_key [not null]

  indexes {
    (id) [pk, unique, name: 'promociones_condiciones_pkey', type: btree]
    (producto_id) [name: 'promociones_condiciones_producto_id_4c8eba9a', type: btree]
  }
}
ref: promociones.Condiciones.producto_id > producto.Producto.id


Table promociones.Promociones {
  Note: '''
Promociones(id, descuento, descripcion, condiciones)

*DB table: promociones_promociones*'''

  id big_auto [pk, unique, not null]
  descuento float [not null]
  descripcion char [not null]
  condiciones_id foreign_key [not null]

  indexes {
    (condiciones_id) [name: 'promociones_promociones_condiciones_id_958313b6', type: btree]
    (id) [pk, unique, name: 'promociones_promociones_pkey', type: btree]
  }
}
ref: promociones.Promociones.condiciones_id > promociones.Condiciones.id


Table rol.Rol {
  Note: '''
Rol(id, nombre)

*DB table: rol_rol*'''

  id big_auto [pk, unique, not null]
  nombre char [not null]

  indexes {
    (id) [pk, unique, name: 'rol_rol_pkey', type: btree]
  }
}


Table sessions.Session {
  Note: '''
Django provides full support for anonymous sessions. The session
framework lets you store and retrieve arbitrary data on a
per-site-visitor basis. It stores data on the server side and
abstracts the sending and receiving of cookies. Cookies contain a
session ID -- not the data itself.

The Django sessions framework is entirely cookie-based. It does
not fall back to putting session IDs in URLs. This is an intentional
design decision. Not only does that behavior make URLs ugly, it makes
your site vulnerable to session-ID theft via the "Referer" header.

For complete documentation on using Sessions in your code, consult
the sessions documentation that is shipped with Django (also available
on the Django web site).


*DB table: django_session*'''

  session_key char [pk, unique, not null]
  session_data text [not null]
  expire_date date_time [not null]

  indexes {
    (expire_date) [name: 'django_session_expire_date_a5c62663', type: btree]
    (session_key) [pk, unique, name: 'django_session_pkey', type: btree]
  }
}


Table ticket.Ticket {
  Note: '''
Ticket(id, promocion, fecha, notas)

*DB table: ticket_ticket*'''

  id big_auto [pk, unique, not null]
  promocion_id foreign_key [not null]
  fecha date_time [not null]
  notas char [not null]

  indexes {
    (id) [pk, unique, name: 'ticket_ticket_pkey', type: btree]
    (promocion_id) [name: 'ticket_ticket_promocion_id_bbe7feef', type: btree]
  }
}
ref: ticket.Ticket.promocion_id > promociones.Promociones.id


Table tipoDePedido.TipoDePedido {
  Note: '''
TipoDePedido(id, nombre)

*DB table: tipoDePedido_tipodepedido*'''

  id big_auto [pk, unique, not null]
  nombre char [not null]

  indexes {
    (id) [pk, unique, name: 'tipoDePedido_tipodepedido_pkey', type: btree]
  }
}


Table tipoProducto.TipoProducto {
  Note: '''
TipoProducto(id, nombre)

*DB table: tipoProducto_tipoproducto*'''

  id big_auto [pk, unique, not null]
  nombre char [not null]

  indexes {
    (id) [pk, unique, name: 'tipoProducto_tipoproducto_pkey', type: btree]
  }
}


Table usuario.Usuario {
  Note: '''
Usuario(id, persona, contrase±a)

*DB table: usuario_usuario*'''

  id big_auto [pk, unique, not null]
  persona_id one_to_one [unique, not null]
  contrase±a char [not null]

  indexes {
    (persona_id) [unique, name: 'usuario_usuario_persona_id_key', type: btree]
    (id) [pk, unique, name: 'usuario_usuario_pkey', type: btree]
  }
}
ref: usuario.Usuario.persona_id - persona.Persona.id


